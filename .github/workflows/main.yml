name: Build & Publish

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  next-build:
    runs-on: ubuntu-20.04
    container: node:lts # Use node LTS container version, same as Dockerfile base image
    steps:
      # 가상 호스트에 코드 복사
      - name: Checkout
        uses: actions/checkout@v2 
      - run: npm ci
      - run: npm run build
        # env:

      # artifact에 파일 업로드
      - name: Upload Next build
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: |
            .next
            public
          retention-days: 7 # 최대 30일 저장 가능

      # lint
      - name: Run Lint
        run: npm run lint
        
      # test
      - name: Run Test
        run: npm run test

  next-deploy:
    # main 브랜치일 때 실행
    if: ${{ github.ref == 'refs/heads/main' }}

    # next-build artifact가 있어야 실행
    needs: next-build
    runs-on: ubuntu-latest
    steps:
      # 가상 호스트에 코드 복사
      - name: Checkout
        uses: actions/checkout@v2

      # artifact에 있는 파일 다운로드
      - name: Download next build
        uses: actions/download-artifact@v2
        with:
          name: build

      # Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 도커 빌드 및 도커 허브에 이미지 올리기
      - name: Build and Push Docker Images
        run: |
          docker build -t blog .
          docker tag blog dngwoodo/blog:${GITHUB_SHA:7}
          docker push dngwoodo/blog:${GITHUB_SHA:7}

      # AWS에 배포하기
      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ec2-3-21-97-153.us-east-2.compute.amazonaws.com
          username: ec2-user
          key: ${{ secrets.AWS_PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
            docker pull dngwoodo/blog:${GITHUB_SHA:7}
            docker tag dngwoodo/blog:${GITHUB_SHA:7} blog
            docker stop server
            docker run --rm -d -p 80:3000 --name server blog